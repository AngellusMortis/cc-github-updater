local a=require("cc.expect")local b={["true"]=true,["yes"]=true,["1"]=true,["y"]=true,["t"]=true,["false"]=false,["no"]=false,["0"]=false,["n"]=false,["f"]=false}local function c(d)a.expect(1,d,"string","boolean")if type(d)=="boolean"then return d end;local e=d:lower()e=b[e]if e==nil then error(string.format("Unexpected string bool value: %s",d))end;return e end;local function f(d,g)a.expect(1,d,"string")a.expect(2,g,"string","nil")if g==nil then g=","end;local h={}for i in string.gmatch(d,"([^"..g.."]+)")do table.insert(h,i)end;return h end;local function j(k,l)for m,e in pairs(l)do k[m]=e end;return k end;local function n(o,p)a.expect(1,o,"table")a.expect(2,p,"table")for q,e in ipairs(p)do table.insert(o,e)end;return o end;local function r(s)local t=type(s)local u;if t=='table'then u={}for v,w in next,s,nil do u[r(v)]=r(w)end;setmetatable(u,r(getmetatable(s)))else u=s end;return u end;local function x(y)a.expect(1,y,"string")y=y.."?ts="..os.time(os.date("!*t"))local z=http.get(y)if z==nil then error(string.format("Bad HTTP Response: %s",y))return end;local A,q=z.getResponseCode()if A~=200 then error(string.format("Bad HTTP code: %d",A))end;return z end;local function B(y,C)a.expect(1,y,"string")a.expect(2,C,"string")if fs.exists(C)then fs.delete(C)end;local z=x(y)local D=fs.open(C,'w')D.write(z.readAll())D.close()end;local function E(y)a.expect(1,y,"string")local z=x(y)return textutils.unserializeJSON(z.readAll())end;local function F(G,...)local H={...}if type(G)=="table"then H=G;G=H[1]table.remove(H,1)end;return G,H end;local function I(J)for m,K in pairs(J)do K.get=function()return settings.get(K.name)end;K.set=function(e)if e==K.default then e=r(K.default)end;settings.set(K.name,e)settings.save()end;J[m]=K;settings.define(K.name,K)end;return J end;local L={}L.strBool=c;L.split=f;L.merge=j;L.concat=n;L.copy=r;L.getAndCheck=x;L.download=B;L.getJSON=E;L.cleanEventArgs=F;L.makeSettingWrapper=I;return L
