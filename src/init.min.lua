if _G.ghuStartupRan then return end;local a=require("cc.shell.completion")local b=require(settings.get("ghu.base").."core/apis/ghu")if b.s.autoUpdate.get()then shell.run("ghuupdate")end;if b.s.autoRun.get()then for c,d in ipairs(b.getAutoruns())do shell.run(d)end end;local e={}local f={}local g={}for h,c in pairs(b.s)do e[#e+1]=h;if b.s[h].type=="table"then f[#f+1]=h;g[h]=true end end;local i=string.sub(b.p.core,2)local j=function(shell,k,l)if l[2]=="list"then return nil end;if l[2]=="add"or l[2]=="remove"then return a.choice(shell,k,l,f,true)end;return a.choice(shell,k,l,e,l[2]~="get")end;local m=function(shell,k,l)if l[2]~="set"and l[2]~="remove"then return nil end;if l[2]=="remove"then if not g[l[3]]then return nil end;return a.choice(shell,k,l,b.s[l[3]].get(),false)end;local n={"default"}if b.s[l[3]].type=="boolean"then n={"default","true","false"}elseif l[3]=="base"then return a.dir(shell,k)end;local o=false;if l[2]=="add"and l[3]=="extraRepos"then o=true end;return a.choice(shell,k,l,n,o)end;local p=function(shell,k,l)if l[2]~="add"or l[3]~="extraRepos"then return nil end;return a.choice(shell,k,l,{"default","true","false"},false)end;shell.setCompletionFunction(i.."programs/ghuconf.lua",a.build({a.choice,{"list","help ","get ","set ","add ","remove "},false},j,m,p))_G.ghuStartupRan=true
