local a=require("cc.expect")local b={["true"]=true,["yes"]=true,["1"]=true,["y"]=true,["t"]=true,["false"]=false,["no"]=false,["0"]=false,["n"]=false,["f"]=false}local function c(d)a.expect(1,d,"string","boolean")if type(d)=="boolean"then return d end;local e=d:lower()e=b[e]if e==nil then error(string.format("Unexpected string bool value: %s",d))end;return e end;local function f(d,g)a.expect(1,d,"string")a.expect(2,g,"string","nil")if g==nil then g=","end;local h={}for i in string.gmatch(d,"([^"..g.."]+)")do table.insert(h,i)end;return h end;local function j(k,l)for m,e in pairs(l)do k[m]=e end;return k end;local function n(o,p)a.expect(1,o,"table")a.expect(2,p,"table")for q,e in ipairs(p)do table.insert(o,e)end;return o end;local function r(s,t)if t==nil then t=true end;local u=type(s)local v;if u=='table'then v={}for w,x in next,s,nil do v[r(w)]=r(x,t)end;if t then setmetatable(v,r(getmetatable(s)))end else v=s end;return v end;local function y(z)a.expect(1,z,"string")z=z.."?ts="..os.time(os.date("!*t"))local A=http.get(z)if A==nil then error(string.format("Bad HTTP Response: %s",z))return end;local B,q=A.getResponseCode()if B~=200 then error(string.format("Bad HTTP code: %d",B))end;return A end;local function C(z,D)a.expect(1,z,"string")a.expect(2,D,"string")if fs.exists(D)then fs.delete(D)end;local A=y(z)local E=fs.open(D,'w')E.write(A.readAll())E.close()end;local function F(z)a.expect(1,z,"string")local A=y(z)return textutils.unserializeJSON(A.readAll())end;local function G(H,...)local I={...}if type(H)=="table"then I=H;H=I[1]table.remove(I,1)end;return H,I end;local function J(K)for m,L in pairs(K)do L.get=function()return settings.get(L.name)end;L.set=function(e)if e==L.default then e=r(L.default)end;settings.set(L.name,e)settings.save()end;K[m]=L;settings.define(L.name,L)end;return K end;local M={}M.strBool=c;M.split=f;M.merge=j;M.concat=n;M.copy=r;M.getAndCheck=y;M.download=C;M.getJSON=F;M.cleanEventArgs=G;M.makeSettingWrapper=J;return M
