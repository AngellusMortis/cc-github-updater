local a=require(settings.get("ghu.base").."core/apis/ghu")local b=require("am.core")local function c(d)local e=a.s[d].get()if d=="extraRepos"then print(#e.." Extra Repo(s):")for f,g in ipairs(e)do local h=a.getMinSetting(g)local i=""if h~=nil then i=h and" (min)"or" (full)"end;print(string.format("%d:%s %s",f,i,g))end else print(e)end end;local function j(k)local l=arg[0]or fs.getName(shell.getRunningProgram())local m=" <list|get|help|set|add|remove> [name] [value]"if k=="list"then m=" list"elseif k=="get"then m=" get <name>"elseif k=="help"then m=" help <name>"elseif k=="set"then m=" set <name> <value>"elseif k=="add"then m=" add <name> <value>"elseif k=="remove"then m=" remove <name> <value>"end;print("Usage: "..l..m)end;local function n(k,o,e,p)if k==nil then j()return end;if k=="list"then for q,r in pairs(a.s)do print(q)end;return end;if o==nil then j(k)return end;if a.s[o]==nil then printError("Unexpected setting name: "..o)return end;if k=="get"then c(o)return elseif k=="help"then print(a.s[o].description)return end;if e==nil then j(k)return end;if k=="set"then if e=="default"then e=b.copy(a.s[o].default)elseif a.s[o].type=="table"then e=b.split(e)elseif a.s[o].type=="boolean"then e=b.strBool(e)end;a.s[o].set(e)c(o)return end;if k=="add"or k=="remove"then if a.s[o].type~="table"then printError("Only supported on table settings")return end;local s=a.s[o].get()if k=="add"then local t=false;for f=#s,1,-1 do if s[f]==e then t=true;break end end;if not t then s[#s+1]=e end;if p~=nil then if p=="default"then settings.unset(a.getMinSettingName(e))else p=b.strBool(p)a.setMinSetting(e,p)end end else for f=#s,1,-1 do if s[f]==e then table.remove(s,f)break end end end;a.s[o].set(s)c(o)end end;n(arg[1],arg[2],arg[3],arg[4])
